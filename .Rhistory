burnin <- floor(iterations/2)
chains <- 3
N <- nrow(data)
data_jags <- list(N=N, y=y)
parameters = c("mu", "sigma", "mixing_p","z")
# with stan
for(i in 1:NT){
resultstan[1,i]<- system.time(suppressMessages(model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = data_jags, iter=iterations, chain=chains,
warmup=burnin)))["elapsed"]
resultstan[2,i] <- min(summary(model_fit)$summary[,"n_eff"][1:6])
resultstan[3,i] <- resultstan[1,i]/resultstan[2,i]
}
# with unrestricted models
for(j in 1:3){
for(i in 1:NT){
model <- paste("two-componentModel",j,".txt",sep="")
result[j,1,i]<- system.time(model.fit <- jags.model(file =
here("Models",model), data=data_jags,
n.chains=chains))["elapsed"]
result[j,2,i] <- system.time(model.samples <-                                    coda.samples(model.fit, parameters,n.iter=iterations))["elapsed"]
result[j,3,i] <- min(effectiveSize(model.samples)[0:6])
result[j,4,i] <-   (result[j,1,i]+result[j,2,i])/result[j,3,i]
}
}
# with restricted models
res_sampler()
for(j in 1:3){
for(i in 1:NT){
model <- paste("two-componentModel",j,".txt",sep="")
resultr[j,1,i]<- system.time(model.fit <- jags.model(file =
here("Models",model), data=data_jags,
n.chains=chains))["elapsed"]
resultr[j,2,i] <- system.time(model.samples <-                                    coda.samples(model.fit, parameters, n.iter=iterations))["elapsed"]
resultr[j,3,i] <- min(effectiveSize(model.samples)[0:6])
resultr[j,4,i] <- (resultr[j,1,i]+resultr[j,2,i])/resultr[j,3,i]
}
}
return(list(result=result, resultr=resultr, resultstan=resultstan))
}
x <- as.numeric(unlist(read.table(here("Data", "data1.txt"))))
plot(density(x), main="data1")
# three dimensional array for storing data
# 3 - 3 models
# 4 - 1:fit.time, 2:sample.tim, 3:ess, 4:(fit+sam)/ess
# 5 - 5 trials
result <- array(rep(0, 12*NT), dim=c(3,4,NT),
dimnames = list(c("m1","m2","m3"),
c("fit","sam","ess","res"),
sprintf("t%d",1:NT)))
require(rjags)
require(coda)
require(here)
require(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load.module("mix")
NT <- 3 # number of trials
all_sampler <- function(){
set.factory("mix::LDA", TRUE, type="sampler")
set.factory("mix::DirichletCat", TRUE, type="sampler")
set.factory("bugs::BinomSlice", TRUE, type="sampler")
set.factory("bugs::RW1", TRUE, type="sampler")
set.factory("bugs::Censored", TRUE, type="sampler")
set.factory("bugs::Sum", TRUE, type="sampler")
set.factory("bugs::DSum", TRUE, type="sampler")
set.factory("bugs::Conjugate", TRUE, type="sampler")
set.factory("bugs::Dirichlet", TRUE, type="sampler")
set.factory("zbugs::MNormal", TRUE, type="sampler")
set.factory("base::Finite", TRUE, type="sampler")
set.factory("base::Slice", TRUE, type="sampler")
set.factory("mix::TemperedMix", TRUE, type="sampler")
}
res_sampler <- function(){
set.factory("mix::LDA", FALSE, type="sampler")
set.factory("mix::DirichletCat", FALSE, type="sampler")
set.factory("bugs::BinomSlice", FALSE, type="sampler")
set.factory("bugs::RW1", FALSE, type="sampler")
set.factory("bugs::Censored", FALSE, type="sampler")
set.factory("bugs::Sum", FALSE, type="sampler")
set.factory("bugs::DSum", FALSE, type="sampler")
set.factory("bugs::Conjugate", FALSE, type="sampler")
set.factory("bugs::Dirichlet", TRUE, type="sampler")
set.factory("bugs::MNormal", FALSE, type="sampler")
set.factory("base::Finite", FALSE, type="sampler")
set.factory("base::Slice", TRUE, type="sampler")
set.factory("mix::TemperedMix", FALSE, type="sampler")
}
sampling <- function(datafile, result, resultr, resultstan){
# set up
all_sampler()
data <- read.table(datafile)
y <- data[,1]
iterations <- 4000
burnin <- floor(iterations/2)
chains <- 3
N <- nrow(data)
data_jags <- list(N=N, y=y)
parameters = c("mu", "sigma", "mixing_p","z")
# with stan
for(i in 1:NT){
resultstan[1,i]<- system.time(suppressMessages(model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = data_jags, iter=iterations, chain=chains,
warmup=burnin)))["elapsed"]
resultstan[2,i] <- min(summary(model_fit)$summary[,"n_eff"][1:6])
resultstan[3,i] <- resultstan[1,i]/resultstan[2,i]
}
# with unrestricted models
for(j in 1:3){
for(i in 1:NT){
model <- paste("two-componentModel",j,".txt",sep="")
result[j,1,i]<- system.time(model.fit <- jags.model(file =
here("Models",model), data=data_jags,
n.chains=chains))["elapsed"]
result[j,2,i] <- system.time(model.samples <-                                    coda.samples(model.fit, parameters,n.iter=iterations))["elapsed"]
result[j,3,i] <- min(effectiveSize(model.samples)[0:6])
result[j,4,i] <-   (result[j,1,i]+result[j,2,i])/result[j,3,i]
}
}
# with restricted models
res_sampler()
for(j in 1:3){
for(i in 1:NT){
model <- paste("two-componentModel",j,".txt",sep="")
resultr[j,1,i]<- system.time(model.fit <- jags.model(file =
here("Models",model), data=data_jags,
n.chains=chains))["elapsed"]
resultr[j,2,i] <- system.time(model.samples <-                                    coda.samples(model.fit, parameters, n.iter=iterations))["elapsed"]
resultr[j,3,i] <- min(effectiveSize(model.samples)[0:6])
resultr[j,4,i] <- (resultr[j,1,i]+resultr[j,2,i])/resultr[j,3,i]
}
}
return(list(result=result, resultr=resultr, resultstan=resultstan))
}
x <- as.numeric(unlist(read.table(here("Data", "data1.txt"))))
plot(density(x), main="data1")
# three dimensional array for storing data
# 3 - 3 models
# 4 - 1:fit.time, 2:sample.tim, 3:ess, 4:(fit+sam)/ess
# 5 - 5 trials
result <- array(rep(0, 12*NT), dim=c(3,4,NT),
dimnames = list(c("m1","m2","m3"),
c("fit","sam","ess","res"),
sprintf("t%d",1:NT)))
resultr <- array(rep(0, 12*NT), dim=c(3,4,NT),
dimnames = list(c("m1r","m2r","m3r"),
c("fit","sam","ess","res"),
sprintf("t%d",1:NT)))
resultstan <- array(rep(0, 3*NT), dim=c(3,NT),
dimnames = list(c("time","ess","stan"),
sprintf("t%d",1:NT)))
r1 <- sampling(here("Data", "data1.txt"), result, resultr, resultstan)
data1 <- c(rowMeans(r1$result[,4,]), rowMeans(r1$resultr[,4,]),rowMeans(r1$resultstan)[3])
boxplot(t(rbind(r1$result[,4,],r1$resultr[,4,],r1$resultstan[3:3,,drop=FALSE])),main="data1")
data1
r1
setwd("~/Documents/Github/Efficiency-of-marginalising-over-discrete-latent-parameters")
knitr::opts_chunk$set(echo = TRUE)
require(rjags)
require(coda)
require(here)
require(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load.module("mix")
NT <- 3 # number of trials
all_sampler <- function(){
set.factory("mix::LDA", TRUE, type="sampler")
set.factory("mix::DirichletCat", TRUE, type="sampler")
set.factory("bugs::BinomSlice", TRUE, type="sampler")
set.factory("bugs::RW1", TRUE, type="sampler")
set.factory("bugs::Censored", TRUE, type="sampler")
set.factory("bugs::Sum", TRUE, type="sampler")
set.factory("bugs::DSum", TRUE, type="sampler")
set.factory("bugs::Conjugate", TRUE, type="sampler")
set.factory("bugs::Dirichlet", TRUE, type="sampler")
set.factory("zbugs::MNormal", TRUE, type="sampler")
set.factory("base::Finite", TRUE, type="sampler")
set.factory("base::Slice", TRUE, type="sampler")
set.factory("mix::TemperedMix", TRUE, type="sampler")
}
res_sampler <- function(){
set.factory("mix::LDA", FALSE, type="sampler")
set.factory("mix::DirichletCat", FALSE, type="sampler")
set.factory("bugs::BinomSlice", FALSE, type="sampler")
set.factory("bugs::RW1", FALSE, type="sampler")
set.factory("bugs::Censored", FALSE, type="sampler")
set.factory("bugs::Sum", FALSE, type="sampler")
set.factory("bugs::DSum", FALSE, type="sampler")
set.factory("bugs::Conjugate", FALSE, type="sampler")
set.factory("bugs::Dirichlet", TRUE, type="sampler")
set.factory("bugs::MNormal", FALSE, type="sampler")
set.factory("base::Finite", FALSE, type="sampler")
set.factory("base::Slice", TRUE, type="sampler")
set.factory("mix::TemperedMix", FALSE, type="sampler")
}
sampling <- function(datafile, result, resultr, resultstan){
# set up
all_sampler()
data <- read.table(datafile)
y <- data[,1]
iterations <- 4000
burnin <- floor(iterations/2)
chains <- 3
N <- nrow(data)
data_jags <- list(N=N, y=y)
parameters = c("mu", "sigma", "mixing_p","z")
# with stan
for(i in 1:NT){
resultstan[1,i]<- system.time(suppressMessages(model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = data_jags, iter=iterations, chain=chains,
warmup=burnin)))["elapsed"]
resultstan[2,i] <- min(summary(model_fit)$summary[,"n_eff"][1:6])
resultstan[3,i] <- resultstan[1,i]/resultstan[2,i]
}
# with unrestricted models
for(j in 1:3){
for(i in 1:NT){
model <- paste("two-componentModel",j,".txt",sep="")
result[j,1,i]<- system.time(model.fit <- jags.model(file =
here("Models",model), data=data_jags,
n.chains=chains))["elapsed"]
result[j,2,i] <- system.time(model.samples <-                                    coda.samples(model.fit, parameters,n.iter=iterations))["elapsed"]
result[j,3,i] <- min(effectiveSize(model.samples)[0:6])
result[j,4,i] <-   (result[j,1,i]+result[j,2,i])/result[j,3,i]
}
}
# with restricted models
res_sampler()
for(j in 1:3){
for(i in 1:NT){
model <- paste("two-componentModel",j,".txt",sep="")
resultr[j,1,i]<- system.time(model.fit <- jags.model(file =
here("Models",model), data=data_jags,
n.chains=chains))["elapsed"]
resultr[j,2,i] <- system.time(model.samples <-                                    coda.samples(model.fit, parameters, n.iter=iterations))["elapsed"]
resultr[j,3,i] <- min(effectiveSize(model.samples)[0:6])
resultr[j,4,i] <- (resultr[j,1,i]+resultr[j,2,i])/resultr[j,3,i]
}
}
return(list(result=result, resultr=resultr, resultstan=resultstan))
}
x <- as.numeric(unlist(read.table(here("Data", "data1.txt"))))
plot(density(x), main="data1")
# three dimensional array for storing data
# 3 - 3 models
# 4 - 1:fit.time, 2:sample.tim, 3:ess, 4:(fit+sam)/ess
# 5 - 5 trials
result <- array(rep(0, 12*NT), dim=c(3,4,NT),
dimnames = list(c("m1","m2","m3"),
c("fit","sam","ess","res"),
sprintf("t%d",1:NT)))
resultr <- array(rep(0, 12*NT), dim=c(3,4,NT),
dimnames = list(c("m1r","m2r","m3r"),
c("fit","sam","ess","res"),
sprintf("t%d",1:NT)))
resultstan <- array(rep(0, 3*NT), dim=c(3,NT),
dimnames = list(c("time","ess","stan"),
sprintf("t%d",1:NT)))
r1 <- sampling(here("Data", "data1.txt"), result, resultr, resultstan)
data1 <- c(rowMeans(r1$result[,4,]), rowMeans(r1$resultr[,4,]),rowMeans(r1$resultstan)[3])
boxplot(t(rbind(r1$result[,4,],r1$resultr[,4,],r1$resultstan[3:3,,drop=FALSE])),main="data1")
data1
r1
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
r4 <- sampling(here("Data", "data4.txt"), result, resultr, resultstan)
data4 <- c(rowMeans(r4$result[,4,]), rowMeans(r4$resultr[,4,]),rowMeans(r4$resultstan)[3])
boxplot(t(rbind(r4$result[,4,],r4$resultr[,4,],r4$resultstan[3:3,,drop=FALSE])),main="data4")
r4
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = here("Data", "data4.txt"), iter=iterations, chain=chains,
warmup=burnin)
data <- read.table(here("Data", "data4.txt"))
r4 <- sampling(data, result, resultr, resultstan)
data <- read.table(here("Data", "data4.txt"))
data
#r4 <- sampling(data, result, resultr, resultstan)
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
data <- read.table(here("Data", "data4.txt"))
model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = data, iter=iterations, chain=chains,
warmup=burnin)
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
s_data <- read.table(here("Data", "data4.txt"))
model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = s_data, iter=iterations, chain=chains,
warmup=burnin)
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
data <- read.table(here("Data", "data4.txt"))
y <- data[,1]
iterations <- 4000
burnin <- floor(iterations/2)
chains <- 3
N <- nrow(data)
data_jags <- list(N=N, y=y)
parameters = c("mu", "sigma", "mixing_p","z")
s_data <-
model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = s_data, iter=iterations, chain=chains,
warmup=burnin)
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
data <- read.table(here("Data", "data4.txt"))
y <- data[,1]
iterations <- 4000
burnin <- floor(iterations/2)
chains <- 3
N <- nrow(data)
data_jags <- list(N=N, y=y)
parameters = c("mu", "sigma", "mixing_p","z")
s_data <-
model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = data_jags, iter=iterations, chain=chains,
warmup=burnin)
edu <- c(8,12,14,16,16,20)
income <- c(8,15,16,20,25,40)
model <- lm(income~edu)
summary(model)
deviance(model)
model <- lm(income~edu)
deviance(model)
deviance(model)/(12)
sum <- summary(model)
sum$r.squared
sum$residuals
sum$sigma
plot(model)
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
data <- read.table(here("Data", "data4.txt"))
y <- data[,1]
iterations <- 4000
burnin <- floor(iterations/2)
chains <- 3
N <- nrow(data)
data_jags <- list(N=N, y=y)
parameters = c("mu", "sigma", "mixing_p","z")
s_data <-
model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = data_jags, iter=iterations, chain=chains,
warmup=burnin)
summary(mode)
summary(model)
summary(model_fit)
summary(model_fit)
summary(model_fit)
summary(model_fit)$summary
summary(model_fit)$summary[,"n_eff"]
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
# data <- read.table(here("Data", "data4.txt"))
# y <- data[,1]
# iterations <- 4000
# burnin <- floor(iterations/2)
# chains <- 3
#
# N <- nrow(data)
# data_jags <- list(N=N, y=y)
# parameters = c("mu", "sigma", "mixing_p","z")
#
# s_data <-
# model_fit <- stan(file = here("Models","two-componentModel.stan"),
#                         data = data_jags, iter=iterations, chain=chains,
#                         warmup=burnin)
# summary(model_fit)
require(rjags)
require(coda)
require(here)
require(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
load.module("mix")
NT <- 3 # number of trials
all_sampler <- function(){
set.factory("mix::LDA", TRUE, type="sampler")
set.factory("mix::DirichletCat", TRUE, type="sampler")
set.factory("bugs::BinomSlice", TRUE, type="sampler")
set.factory("bugs::RW1", TRUE, type="sampler")
set.factory("bugs::Censored", TRUE, type="sampler")
set.factory("bugs::Sum", TRUE, type="sampler")
set.factory("bugs::DSum", TRUE, type="sampler")
set.factory("bugs::Conjugate", TRUE, type="sampler")
set.factory("bugs::Dirichlet", TRUE, type="sampler")
set.factory("zbugs::MNormal", TRUE, type="sampler")
set.factory("base::Finite", TRUE, type="sampler")
set.factory("base::Slice", TRUE, type="sampler")
set.factory("mix::TemperedMix", TRUE, type="sampler")
}
res_sampler <- function(){
set.factory("mix::LDA", FALSE, type="sampler")
set.factory("mix::DirichletCat", FALSE, type="sampler")
set.factory("bugs::BinomSlice", FALSE, type="sampler")
set.factory("bugs::RW1", FALSE, type="sampler")
set.factory("bugs::Censored", FALSE, type="sampler")
set.factory("bugs::Sum", FALSE, type="sampler")
set.factory("bugs::DSum", FALSE, type="sampler")
set.factory("bugs::Conjugate", FALSE, type="sampler")
set.factory("bugs::Dirichlet", TRUE, type="sampler")
set.factory("bugs::MNormal", FALSE, type="sampler")
set.factory("base::Finite", FALSE, type="sampler")
set.factory("base::Slice", TRUE, type="sampler")
set.factory("mix::TemperedMix", FALSE, type="sampler")
}
sampling <- function(datafile, result, resultr, resultstan){
# set up
all_sampler()
data <- read.table(datafile)
y <- data[,1]
iterations <- 4000
burnin <- floor(iterations/2)
chains <- 3
N <- nrow(data)
data_jags <- list(N=N, y=y)
parameters = c("mu", "sigma", "mixing_p","z")
# with stan
for(i in 1:NT){
resultstan[1,i]<- system.time(suppressMessages(model_fit <- stan(file = here("Models","two-componentModel.stan"),
data = data_jags, iter=iterations, chain=chains,
warmup=burnin)))["elapsed"]
resultstan[2,i] <- min(summary(model_fit)$summary[,"n_eff"][1:6])
resultstan[3,i] <- resultstan[1,i]/resultstan[2,i]
}
# with unrestricted models
for(j in 1:3){
for(i in 1:NT){
model <- paste("two-componentModel",j,".txt",sep="")
result[j,1,i]<- system.time(model.fit <- jags.model(file =
here("Models",model), data=data_jags,
n.chains=chains))["elapsed"]
result[j,2,i] <- system.time(model.samples <-                                    coda.samples(model.fit, parameters,n.iter=iterations))["elapsed"]
result[j,3,i] <- min(effectiveSize(model.samples)[0:6])
result[j,4,i] <-   (result[j,1,i]+result[j,2,i])/result[j,3,i]
}
}
# with restricted models
res_sampler()
for(j in 1:3){
for(i in 1:NT){
model <- paste("two-componentModel",j,".txt",sep="")
resultr[j,1,i]<- system.time(model.fit <- jags.model(file =
here("Models",model), data=data_jags,
n.chains=chains))["elapsed"]
resultr[j,2,i] <- system.time(model.samples <-                                    coda.samples(model.fit, parameters, n.iter=iterations))["elapsed"]
resultr[j,3,i] <- min(effectiveSize(model.samples)[0:6])
resultr[j,4,i] <- (resultr[j,1,i]+resultr[j,2,i])/resultr[j,3,i]
}
}
return(list(result=result, resultr=resultr, resultstan=resultstan))
}
x <- as.numeric(unlist(read.table(here("Data", "data1.txt"))))
plot(density(x), main="data1")
# three dimensional array for storing data
# 3 - 3 models
# 4 - 1:fit.time, 2:sample.tim, 3:ess, 4:(fit+sam)/ess
# 5 - 5 trials
result <- array(rep(0, 12*NT), dim=c(3,4,NT),
dimnames = list(c("m1","m2","m3"),
c("fit","sam","ess","res"),
sprintf("t%d",1:NT)))
resultr <- array(rep(0, 12*NT), dim=c(3,4,NT),
dimnames = list(c("m1r","m2r","m3r"),
c("fit","sam","ess","res"),
sprintf("t%d",1:NT)))
resultstan <- array(rep(0, 3*NT), dim=c(3,NT),
dimnames = list(c("time","ess","stan"),
sprintf("t%d",1:NT)))
r1 <- sampling(here("Data", "data1.txt"), result, resultr, resultstan)
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
# data <- read.table(here("Data", "data4.txt"))
# y <- data[,1]
# iterations <- 4000
# burnin <- floor(iterations/2)
# chains <- 3
#
# N <- nrow(data)
# data_jags <- list(N=N, y=y)
# parameters = c("mu", "sigma", "mixing_p","z")
#
# s_data <-
# model_fit <- stan(file = here("Models","two-componentModel.stan"),
#                         data = data_jags, iter=iterations, chain=chains,
#                         warmup=burnin)
# summary(model_fit)
x <- as.numeric(unlist(read.table(here("Data", "data4.txt"))))
plot(density(x), main="data4")
# data <- read.table(here("Data", "data4.txt"))
# y <- data[,1]
# iterations <- 4000
# burnin <- floor(iterations/2)
# chains <- 3
#
# N <- nrow(data)
# data_jags <- list(N=N, y=y)
# parameters = c("mu", "sigma", "mixing_p","z")
#
# s_data <-
# model_fit <- stan(file = here("Models","two-componentModel.stan"),
#                         data = data_jags, iter=iterations, chain=chains,
#                         warmup=burnin)
# summary(model_fit)
r4 <- sampling(here("Data", "data4.txt"), result, resultr, resultstan)
data4 <- c(rowMeans(r4$result[,4,]), rowMeans(r4$resultr[,4,]),rowMeans(r4$resultstan)[3])
boxplot(t(rbind(r4$result[,4,],r4$resultr[,4,],r4$resultstan[3:3,,drop=FALSE])),main="data4")
r4
data1 <- c(rowMeans(r1$result[,4,]), rowMeans(r1$resultr[,4,]),rowMeans(r1$resultstan)[3])
